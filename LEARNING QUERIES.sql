-- QUERIES

-- LINK TO ACCESS DATABASE
-- https://learn.microsoft.com/en-us/sql/samples/adventureworks-install-configure?view=sql-server-ver16&tabs=ssms
-- FILE NAME: AdventureWorksLT2022.bak (LIGHTWEIGHT)

USE AdventureWorksLT2022;

-- 1. SELECT QUERY

SELECT * FROM SALESLT.PRODUCT;
SELECT PRODUCTID AS ID, NAME, PRODUCTNUMBER, LISTPRICE, COLOR FROM SalesLT.Product;

-- 2. DISTINCT QUERY (EXTRACTS UNIQUE VALUES)

SELECT DISTINCT PRODUCTNUMBER FROM SalesLT.Product;
SELECT DISTINCT COLOR, PRODUCTNUMBER FROM SalesLT.Product;

--3. DISTINCT WITH COUNT(COUNT IS A FUNCTION AND DISTINCT IS A KEYWORD)

SELECT COUNT(DISTINCT COLOR) FROM SalesLT.Product;
SELECT COUNT(DISTINCT SIZE) FROM SalesLT.Product;

--4 WHERE CLAUSE (CONDITION USED WITH UPDATE, DELETE AND SELECT QUERIES)

SELECT * FROM SalesLT.Product WHERE COLOR = 'BLACK';
SELECT * FROM SalesLT.Product WHERE SIZE IS NULL;
SELECT * FROM SalesLT.Product WHERE ListPrice > 3000;
SELECT * FROM SalesLT.Product WHERE ListPrice BETWEEN 500 AND 1000;
SELECT * FROM SalesLT.Product WHERE NAME LIKE '%ROAD%';
SELECT * FROM SalesLT.Product WHERE COLOR IN ('BLACK','RED');
SELECT * FROM SalesLT.Product WHERE ListPrice != 1431.50;
--WITH SELECT WEHRE CAN BE USED WITH OPERATORS: =, <, >, >=, <=, !=, BETWEEN, LIKE, IN

--5 ORDER BY (USED TO SORT THE RESULT IN ASCENDING OR DESCENDING ORDER)
SELECT * FROM SalesLT.Product ORDER BY ListPrice DESC;
SELECT * FROM SalesLT.Product ORDER BY ListPrice ASC;
SELECT * FROM SalesLT.Product ORDER BY NAME ASC;
SELECT * FROM SalesLT.Product ORDER BY NAME ASC, ProductNumber DESC;

--6 AND OPERATOR 
SELECT * FROM SalesLT.PRODUCT WHERE SIZE IS NULL AND Weight IS NULL;

--7 OR OPERATOR
SELECT * FROM SalesLT.Product WHERE NAME LIKE '%S' OR ProductNumber LIKE '%H';

--8 NOT
SELECT * FROM SalesLT.Product WHERE NOT COLOR = 'black'; 

--9 INSERT INTO 
--INSERT INTO TABLE_NAME(COLUMN1, COLUMN2, COLUMN3) VALUES (VALUE1, VALUE2, VALUE3);
--INSERT INTO TABLE_NAME(VALUE1, VALUES2, VALUE3);

--10 NULL VALUES
-- CONTAINS NULL AND NOT NULL CONSTRAINTS
SELECT * FROM SalesLT.PRODUCT WHERE SIZE IS NULL;
SELECT * FROM SalesLT.Product WHERE COLOR IS NOT NULL AND SIZE IS NOT NULL AND WEIGHT IS NOT NULL;

--11 UPDATE
-- USED WITH WHERE CONDITION 
UPDATE SalesLT.Product SET SIZE=60 WHERE COLOR IS NULL AND SIZE IS NULL AND WEIGHT IS NULL;

-- 12 DELETE STATEMENT
-- USED WITH WHERE CONDITION TO DELETE IF NOT THEN IT WILL DELETE THE ENTIRE DATA FROM THE TABLE
--DELETE FROM SalesLT.Product WHERE SellEndDate IS NULL ;

--13 TOP 
SELECT TOP 30 PERCENT SIZE FROM SalesLT.Product;
SELECT TOP 3 SIZE FROM SalesLT.Product;

--14 AGGREGATE FUNCTION
--MIN()
SELECT MIN(ListPrice) AS 'MINIMUM PRICE' FROM SalesLT.Product;

--MAX()
SELECT MAX(ListPrice) AS 'MAXIMUM PRICE' FROM SalesLT.Product;

--SUM()
SELECT SUM(ListPrice) AS 'SUM' FROM SalesLT.Product;

--AVG()
SELECT AVG(LISTPRICE) AS 'AVERAGE PRODUCT PRICE' FROM SalesLT.Product;

--COUNT() 
--ONLY COUNT() DOES NOT IGNORE THE NULL VALUES REST ALL IGNORE NULL VALUES
SELECT COUNT(DISTINCT (Color)) AS 'NUMBER OF PRODUCT COLOR' FROM SalesLT.Product;

--15 LIKE OPERATOR (WILDCARD)
--% REPRESENTS zero, one, or multiple characters BEHIND A
-- _ REPRESENTS SINGLE CHARACTER OR NUMBER OR ANY SPECIAL CHARACTER BUT ONLY ONE 
SELECT * FROM SalesLT.Product WHERE Name LIKE 'A%';
SELECT * FROM SalesLT.Product WHERE NAME LIKE '_W%';

-- [] wildcard returns a result if any of the characters inside gets a match.
-- IN THIS CASE IT WILL RETURN ALL MATCHING NAME STARTING WITH A,B,C;
SELECT * FROM SalesLT.Product WHERE NAME LIKE '[ABC]%';

--The - wildcard allows you to specify a range of characters inside the [] wildcard.
-- IN THIS CASE IT WILL RETURN ALL THE NAMES STARTING FROM A UPTO G
SELECT * FROM SalesLT.Product WHERE NAME LIKE '[A-G]%';

--16 IN OPERATOR
SELECT * FROM SalesLT.Product WHERE COLOR IN ('BLACK','BLUE', 'SILVER');

--17 NOT IN
SELECT * FROM SalesLT.Product WHERE COLOR NOT IN ('BLACK','BLUE');


